#pragma once
#ifndef IA_BUILD_H_
#define IA_BUILD_H_

/*
 * ioarena: embedded storage benchmarking
 *
 * Copyright (c) ioarena authors
 * BSD License
 */

/*
 * This file is generated by CMake. The original file is called
 * ia_build.h.cmake. Please do not modify.
 */

#include "ioarena.h"

#cmakedefine01 HAVE_SOPHIA
#cmakedefine01 HAVE_ROCKSDB
#cmakedefine01 HAVE_MDBX
#cmakedefine01 HAVE_LMDB
#cmakedefine01 HAVE_LEVELDB
#cmakedefine01 HAVE_WIREDTIGER
#cmakedefine01 HAVE_FORESTDB
#cmakedefine01 HAVE_SQLITE3
#cmakedefine01 HAVE_EJDB
#cmakedefine01 HAVE_UNQLITE
#cmakedefine01 HAVE_UPSCALEDB
#cmakedefine01 HAVE_VEDISDB
#cmakedefine01 HAVE_IOWOW

extern iadriver ia_dummy;
extern iadriver ia_debug;

#if HAVE_SOPHIA
extern iadriver ia_sophia;
#endif
#if HAVE_ROCKSDB
extern iadriver ia_rocksdb;
#endif
#if HAVE_MDBX
extern iadriver ia_mdbx;
#endif
#if HAVE_LMDB
extern iadriver ia_lmdb;
#endif
#if HAVE_LEVELDB
extern iadriver ia_leveldb;
#endif
#if HAVE_WIREDTIGER
extern iadriver ia_wt;
#endif
#if HAVE_FORESTDB
extern iadriver ia_forestdb;
#endif
#if HAVE_SQLITE3
extern iadriver ia_sqlite3;
#endif
#if HAVE_EJDB
extern iadriver ia_ejdb;
#endif
#if HAVE_UNQLITE
extern iadriver ia_unqlite;
#endif
#if HAVE_UPSCALEDB
extern iadriver ia_upscaledb;
#endif
#if HAVE_VEDISDB
extern iadriver ia_vedisdb;
#endif
#if HAVE_IOWOW
extern iadriver ia_iowow;
#endif

static inline iadriver *ia_get_driver_for(char *name) {
  if (strcasecmp(name, "dummy") == 0) {
    return &ia_dummy;
  }
  if (strcasecmp(name, "debug") == 0) {
    return &ia_debug;
  }
#if HAVE_SOPHIA
  if (strcasecmp(name, "sophia") == 0) {
    return &ia_sophia;
  }
#endif
#if HAVE_ROCKSDB
  if (strcasecmp(name, "rocksdb") == 0) {
    return &ia_rocksdb;
  }
#endif
#if HAVE_MDBX
  if (strcasecmp(name, "mdbx") == 0) {
    return &ia_mdbx;
  }
#endif
#if HAVE_LMDB
  if (strcasecmp(name, "lmdb") == 0) {
    return &ia_lmdb;
  }
#endif
#if HAVE_LEVELDB
  if (strcasecmp(name, "leveldb") == 0) {
    return &ia_leveldb;
  }
#endif
#if HAVE_WIREDTIGER
  if (strcasecmp(name, "wiredtiger") == 0) {
    return &ia_wt;
  }
#endif
#if HAVE_FORESTDB
  if (strcasecmp(name, "forestdb") == 0) {
    return &ia_forestdb;
  }
#endif
#if HAVE_SQLITE3
  if (strcasecmp(name, "sqlite3") == 0) {
    return &ia_sqlite3;
  }
#endif
#if HAVE_EJDB
  if (strcasecmp(name, "ejdb") == 0) {
    return &ia_ejdb;
  }
#endif
#if HAVE_UNQLITE
  if (strcasecmp(name, "unqlite") == 0) {
    return &ia_unqlite;
  }
#endif
#if HAVE_UPSCALEDB
  if (strcasecmp(name, "upscaledb") == 0) {
    return &ia_upscaledb;
  }
#endif
#if HAVE_VEDISDB
  if (strcasecmp(name, "vedisdb") == 0) {
    return &ia_vedisdb;
  }
#endif
#if HAVE_IOWOW
  if (strcasecmp(name, "iowow") == 0) {
    return &ia_iowow;
  }
#endif
  return NULL;
}

static inline char *ia_supported(void) {
  static char list[512];
  int len = 0;
#if HAVE_SOPHIA
  len += snprintf(list + len, sizeof(list) - len, "%ssophia",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_ROCKSDB
  len += snprintf(list + len, sizeof(list) - len, "%srocksdb",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_MDBX
  len +=
      snprintf(list + len, sizeof(list) - len, "%smdbx", (len > 0) ? ", " : "");
#endif
#if HAVE_LMDB
  len +=
      snprintf(list + len, sizeof(list) - len, "%slmdb", (len > 0) ? ", " : "");
#endif
#if HAVE_LEVELDB
  len += snprintf(list + len, sizeof(list) - len, "%sleveldb",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_WIREDTIGER
  len += snprintf(list + len, sizeof(list) - len, "%swiredtiger",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_FORESTDB
  len += snprintf(list + len, sizeof(list) - len, "%sforestdb",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_SQLITE3
  len += snprintf(list + len, sizeof(list) - len, "%ssqlite3",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_EJDB
  len +=
      snprintf(list + len, sizeof(list) - len, "%sejdb", (len > 0) ? ", " : "");
#endif
#if HAVE_UNQLITE
  len += snprintf(list + len, sizeof(list) - len, "%sunqlite",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_UPSCALEDB
  len += snprintf(list + len, sizeof(list) - len, "%supscaledb",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_VEDISDB
  len += snprintf(list + len, sizeof(list) - len, "%svedisdb",
                  (len > 0) ? ", " : "");
#endif
#if HAVE_IOWOW
  len += snprintf(list + len, sizeof(list) - len, "%siowow",
                  (len > 0) ? ", " : "");
#endif

  len += snprintf(list + len, sizeof(list) - len, "%sdummy",
                  (len > 0) ? ", " : "");
  if (len == 0) {
    snprintf(list, sizeof(list), "no_driver_supported");
  }
  return list;
}

#endif
